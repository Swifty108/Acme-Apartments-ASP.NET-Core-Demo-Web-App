/// Floor Plan Page ////

<script type="text/javascript">

	function loginRedirect() {

	}

	$(document).ready(function () {

		loginRedirect();

	});

</script>


@section scripts {

	<script type="text/javascript">

			$(document).ready(function () {

				$('table a').click(function () {

	   if ($("#checkLogin").val === "loggedIn") {
				window.location.href = "@Url.Action("Apply", "Home")";
			}
			else {
					window.location.href="@Url.Action("Login", "Home")";
			}

				});

			});

	</script>

}

//// APPLICATION DOMAIN MODEL ////

   [Required]
		[Column(TypeName = "date")]
		[Display(Name = "Date of Birth")]
		public DateTime DateOfBirth { get; set; }
		[Required]
		[RegularExpression("^[a-zA-Z0-9_\\.-]+@([a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$", ErrorMessage = "E-mail is not valid")]
		public string Email { get; set; }
		[Required]
		[Display(Name = "Street Address")]
		public string StreetAddress { get; set; }
		[Required]
		public string City { get; set; }
		[Required]
		public string State { get; set; }
		[Required]
		public string Zipcode { get; set; }


		//// dbsnapshot ////

		[DbContext(typeof(ApplicationDbContext))]
	partial class ApplicationDbContextModelSnapshot : ModelSnapshot
	{
		protected override void BuildModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "3.1.9")
				.HasAnnotation("Relational:MaxIdentifierLength", 128)
				.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
				{
					b.Property<string>("Id")
						.HasColumnType("nvarchar(450)");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("nvarchar(max)");

					b.Property<string>("Name")
						.HasColumnType("nvarchar(256)")
						.HasMaxLength(256);

					b.Property<string>("NormalizedName")
						.HasColumnType("nvarchar(256)")
						.HasMaxLength(256);

					b.HasKey("Id");

					b.HasIndex("NormalizedName")
						.IsUnique()
						.HasName("RoleNameIndex")
						.HasFilter("[NormalizedName] IS NOT NULL");

					b.ToTable("AspNetRoles");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("ClaimType")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("ClaimValue")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("RoleId")
						.IsRequired()
						.HasColumnType("nvarchar(450)");

					b.HasKey("Id");

					b.HasIndex("RoleId");

					b.ToTable("AspNetRoleClaims");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int")
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("ClaimType")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("ClaimValue")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("UserId")
						.IsRequired()
						.HasColumnType("nvarchar(450)");

					b.HasKey("Id");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserClaims");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
				{
					b.Property<string>("LoginProvider")
						.HasColumnType("nvarchar(450)");

					b.Property<string>("ProviderKey")
						.HasColumnType("nvarchar(450)");

					b.Property<string>("ProviderDisplayName")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("UserId")
						.IsRequired()
						.HasColumnType("nvarchar(450)");

					b.HasKey("LoginProvider", "ProviderKey");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserLogins");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
				{
					b.Property<string>("UserId")
						.HasColumnType("nvarchar(450)");

					b.Property<string>("RoleId")
						.HasColumnType("nvarchar(450)");

					b.HasKey("UserId", "RoleId");

					b.HasIndex("RoleId");

					b.ToTable("AspNetUserRoles");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
				{
					b.Property<string>("UserId")
						.HasColumnType("nvarchar(450)");

					b.Property<string>("LoginProvider")
						.HasColumnType("nvarchar(450)");

					b.Property<string>("Name")
						.HasColumnType("nvarchar(450)");

					b.Property<string>("Value")
						.HasColumnType("nvarchar(max)");

					b.HasKey("UserId", "LoginProvider", "Name");

					b.ToTable("AspNetUserTokens");
				});

			modelBuilder.Entity("Peach_Grove_Apartments_Demo_Project.Models.Application", b =>
				{
					b.Property<Guid>("ApplicationId")
						.ValueGeneratedOnAdd()
						.HasColumnType("uniqueidentifier");

					b.Property<string>("AptUserIdId")
						.HasColumnType("nvarchar(450)");

					b.Property<int>("Income")
						.HasColumnType("int");

					b.Property<string>("Occupation")
						.IsRequired()
						.HasColumnType("nvarchar(max)");

					b.Property<string>("Price")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("ReasonForMoving")
						.IsRequired()
						.HasColumnType("nvarchar(max)");

					b.Property<string>("Room")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("SSN")
						.IsRequired()
						.HasColumnType("nvarchar(max)");

					b.HasKey("ApplicationId");

					b.HasIndex("AptUserIdId");

					b.ToTable("Applications");
				});

			modelBuilder.Entity("Peach_Grove_Apartments_Demo_Project.Models.AptUser", b =>
				{
					b.Property<string>("Id")
						.HasColumnType("nvarchar(450)");

					b.Property<int>("AccessFailedCount")
						.HasColumnType("int");

					b.Property<string>("City")
						.IsRequired()
						.HasColumnType("nvarchar(max)");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("nvarchar(max)");

					b.Property<DateTime>("DateOfBirth")
						.HasColumnType("date");

					b.Property<string>("Email")
						.HasColumnType("nvarchar(256)")
						.HasMaxLength(256);

					b.Property<bool>("EmailConfirmed")
						.HasColumnType("bit");

					b.Property<string>("FName")
						.IsRequired()
						.HasColumnType("nvarchar(max)");

					b.Property<bool>("IsResident")
						.HasColumnType("bit");

					b.Property<string>("LName")
						.IsRequired()
						.HasColumnType("nvarchar(max)");

					b.Property<bool>("LockoutEnabled")
						.HasColumnType("bit");

					b.Property<DateTimeOffset?>("LockoutEnd")
						.HasColumnType("datetimeoffset");

					b.Property<string>("NormalizedEmail")
						.HasColumnType("nvarchar(256)")
						.HasMaxLength(256);

					b.Property<string>("NormalizedUserName")
						.HasColumnType("nvarchar(256)")
						.HasMaxLength(256);

					b.Property<string>("PasswordHash")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("PhoneNumber")
						.HasColumnType("nvarchar(max)");

					b.Property<bool>("PhoneNumberConfirmed")
						.HasColumnType("bit");

					b.Property<string>("SSN")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("SecurityStamp")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("State")
						.IsRequired()
						.HasColumnType("nvarchar(max)");

					b.Property<string>("StreetAddress")
						.IsRequired()
						.HasColumnType("nvarchar(max)");

					b.Property<bool>("TwoFactorEnabled")
						.HasColumnType("bit");

					b.Property<string>("UserName")
						.HasColumnType("nvarchar(256)")
						.HasMaxLength(256);

					b.Property<string>("Zipcode")
						.IsRequired()
						.HasColumnType("nvarchar(max)");

					b.HasKey("Id");

					b.HasIndex("NormalizedEmail")
						.HasName("EmailIndex");

					b.HasIndex("NormalizedUserName")
						.IsUnique()
						.HasName("UserNameIndex")
						.HasFilter("[NormalizedUserName] IS NOT NULL");

					b.ToTable("AspNetUsers");
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
				{
					b.HasOne("Peach_Grove_Apartments_Demo_Project.Models.AptUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
				{
					b.HasOne("Peach_Grove_Apartments_Demo_Project.Models.AptUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("Peach_Grove_Apartments_Demo_Project.Models.AptUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
				{
					b.HasOne("Peach_Grove_Apartments_Demo_Project.Models.AptUser", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Peach_Grove_Apartments_Demo_Project.Models.Application", b =>
				{
					b.HasOne("Peach_Grove_Apartments_Demo_Project.Models.AptUser", "AptUserId")
						.WithMany()
						.HasForeignKey("AptUserIdId");
				});
#pragma warning restore 612, 618
		}
	}
   

   //// APPLY PAGE ////

	   $(document).on('submit', function () {

		event.preventDefault();

		// everything else you want to do on submit
	});




	  public async Task<IActionResult> Maintenance()
		{
			var applicationDbContext = _context.Applications.Include(a => a.AptUser);
			return View(await applicationDbContext.ToListAsync());
		}

		public async Task<IActionResult> Payments()
		{

			var application = await _context.Applications.Include(a => a.AptUser).FirstOrDefaultAsync();

			//var waterBill = _context.WaterBills.Include(a => a.AptUser);
			var waterBill = await _context.WaterBills.FirstOrDefaultAsync();
			var electricBill = await _context.ElectricBills.FirstOrDefaultAsync();

			var payViewModel = new PaymentsViewModel
			{
				Application = application,
				WaterBill = waterBill,
				ElectricBill = electricBill
			};
			//return View(await applicationDbContext.ToListAsync());

			return View(payViewModel);
		}

		//////// AppUserAccountController /////////////

 private readonly ApplicationDbContext _context;
		private readonly UserManager<AptUser> _userManager;

		public AppUserAccountController(ApplicationDbContext context, UserManager<AptUser> userManager)
		{
			_context = context;
			_userManager = userManager;
		}

		// GET: AppUserAccount
		public IActionResult Index()
		{

			return View();
		}

		[HttpGet]
		public IActionResult Maintenance()
		{
			//var user = await _userManager.GetUserAsync(User);

			//var maintreq = new MaintenanceRequest { AptUser = user, ProblemDescription = "My closet door is not opening smoothly. This started yesterday.", DateRequested = DateTime.Now, isAllowedToEnter = true };

			//await _context.MaintenanceRequests.AddAsync(maintreq);
			//await _context.SaveChangesAsync();

			// var maintReq = await _context.MaintenanceRequests.Where(a => a.AptUserId == user.Id).FirstOrDefaultAsync();
			// var maintReqs = await _context.MaintenanceRequests.ToListAsync();

			//var maintenanceReqViewModel = new CompositeMaintRequestViewModel
			//{
			//    MaintenanceRequestViewModel = new MaintenanceRequestViewModel { },
			//    MaintenanceRequests = maintReqs
			//};

			//var maintenanceReqViewModel = new MaintenanceRequestViewModel
			//{

			//};
		  
			ViewBag.Success = TempData["isSuccess"];

			return View();
		}

		[HttpPost]
		public async Task<IActionResult> Maintenance(MaintenanceRequestViewModel maintReqViewModel)
		{

			//var maintReqs = await _context.MaintenanceRequests.ToListAsync();
			//maintReqViewModel.MaintenanceRequests = maintReqs;

			if (ModelState.IsValid) // Is User Input Valid?
			{

				try
				{
					
					var user = await _userManager.GetUserAsync(User);
					var maintReq = new MaintenanceRequest { AptUser = user, DateRequested = DateTime.Now, isAllowedToEnter = maintReqViewModel.isAllowedToEnter, ProblemDescription = maintReqViewModel.ProblemDescription };
					await _context.MaintenanceRequests.AddAsync(maintReq);
					await _context.SaveChangesAsync();

				  

					//TempData["isSuccess"] = new MessageVM() { CssClassName = "alert-sucess", Title = "Success!", Message = "Operation Done." };
				   
					TempData["isSuccess"] = true;

					return RedirectToAction("Maintenance");

				}
				catch (Exception e)
				{
					TempData["SuccessMessage"] = "failure";
				   // maintReqViewModel.SuccessMessage = "failure";
					TempData["maintReqError"] = e;
					return View(maintReqViewModel);

				}

			}

			return View(maintReqViewModel);
		}

		//[HttpPost]
		//public async Task<IActionResult> Maintenance(MaintenRequestViewModel compMaintReqViewModel)
		//{

		//    var maintReqs = await _context.MaintenanceRequests.ToListAsync();
		//    compMaintReqViewModel.MaintenanceRequests = maintReqs;

		//    if (ModelState.IsValid) // Is User Input Valid?
		//    {

		//        try
		//        {

		//            var user = await _userManager.GetUserAsync(User);
		//            var maintReq = new MaintenanceRequest { AptUser = user, DateRequested = DateTime.Now, isAllowedToEnter = compMaintReqViewModel.MaintenanceRequestViewModel.isAllowedToEnter, ProblemDescription = compMaintReqViewModel.MaintenanceRequestViewModel.ProblemDescription };
		//            await _context.MaintenanceRequests.AddAsync(maintReq);
		//            await _context.SaveChangesAsync();



		//            //TempData["isSuccess"] = new MessageVM() { CssClassName = "alert-sucess", Title = "Success!", Message = "Operation Done." };
		//            TempData["SuccessMessage"] = "success";

		//            return View(compMaintReqViewModel);

		//        }
		//        catch (Exception e)
		//        {
		//            TempData["SuccessMessage"] = "falure";
		//            TempData["maintReqError"] = e;
		//            return View(compMaintReqViewModel);

		//        }

		//    }

		//    return View(compMaintReqViewModel);
		//}


		[HttpGet]
		public async Task<IActionResult> ReqHistory()
		{
			var user = await _userManager.GetUserAsync(User);

			//var maintreq = new MaintenanceRequest { AptUser = user, ProblemDescription = "My closet door is not opening smoothly. This started yesterday.", DateRequested = DateTime.Now, isAllowedToEnter = true };

			//await _context.MaintenanceRequests.AddAsync(maintreq);
			//await _context.SaveChangesAsync();

			//var maintReqs = await _context.MaintenanceRequests.Where(a => a.AptUserId == user.Id).ToList();
			var maintReqs = await _context.MaintenanceRequests.Where(a => a.AptUserId == user.Id).ToListAsync();

			//var maintenanceReqViewModel = new CompositeMaintRequestViewModel
			//{
			//    MaintenanceRequestViewModel = new MaintenanceRequestViewModel { },
			//    MaintenanceRequests = maintReqs
			//};

			var maintReqViewModel = new MaintenanceReqHistoryViewModel { Requests = maintReqs };

			TempData["SuccessMessage"] = "";

			return View(maintReqViewModel);
		}


		public async Task<IActionResult> Payments()
		{


			var user = await _userManager.GetUserAsync(User);

			var waterBill = await _context.WaterBills.FirstOrDefaultAsync();
			var electricBill = await _context.ElectricBills.FirstOrDefaultAsync();
			var wbill = new WaterBill();
			var ebill = new ElectricBill();

			if (waterBill == null)
			{
				wbill = new WaterBill { AptUser = user, Amount = 42.53M, DateDue = DateTime.Now.AddDays(20) };
				await _context.AddAsync(wbill);
				await _context.SaveChangesAsync();
			}

			if (electricBill == null)
			{
				ebill = new ElectricBill { AptUser = user, Amount = 96.53M, DateDue = DateTime.Now.AddDays(20) };
				await _context.AddAsync(ebill);
				await _context.SaveChangesAsync();
			}

			var app = await _context.Applications.Where(u => u.AptUserId == user.Id).FirstOrDefaultAsync();

			//var waterBill = _context.WaterBills.Include(a => a.AptUser);

			var payViewModel = new PaymentsViewModel
			{
				Application = app,
				WaterBill = waterBill ?? wbill,
				ElectricBill = electricBill ?? ebill
			};
			//return View(await applicationDbContext.ToListAsync());

			return View(payViewModel);
		}

		public IActionResult WriteReview()
		{
			ViewBag.ReviewSuccess = TempData["ReviewSuccess"];
			return View();
		}

		[HttpPost]
		public async Task<IActionResult> WriteReview(ReviewViewModel review)
		{

			if (ModelState.IsValid)
			{
				var user = await _userManager.GetUserAsync(User);
				var newReview = new Review { AptUser = user, DateReviewed = DateTime.Now.AddDays(20), ReviewText = review.ReviewText  };
				await _context.AddAsync(newReview);
				await _context.SaveChangesAsync();

				TempData["ReviewSuccess"] = true;
				return RedirectToAction("WriteReview");

			}
			return View();
		}

		[HttpGet]

		public IActionResult ContactUs()
		{
			ViewBag.ContactUsSuccess = TempData["ContactUsSuccess"];
			return View();
		}

		[HttpPost]
		public IActionResult ContactUs(ContactViewModel viewModel)
		{

			if (ModelState.IsValid)
			{
				TempData["ContactUsSuccess"] = true;
				return RedirectToAction("ContactUs");
			}
			return View(viewModel);
		}



		// GET: AppUserAccount/Details/5
		public async Task<IActionResult> Details(int? id)
		{
			if (id == null)
			{
				return NotFound();
			}

			var application = await _context.Applications
				.Include(a => a.AptUser)
				.FirstOrDefaultAsync(m => m.ApplicationId == id);
			if (application == null)
			{
				return NotFound();
			}

			return View(application);
		}

		// GET: AppUserAccount/Create
		public IActionResult Create()
		{
			ViewData["AptUserId"] = new SelectList(_context.AptUsers, "Id", "Id");
			return View();
		}

		// POST: AppUserAccount/Create
		// To protect from overposting attacks, enable the specific properties you want to bind to, for 
		// more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
		[HttpPost]
		[ValidateAntiForgeryToken]
		public async Task<IActionResult> Create([Bind("ApplicationId,AptUserId,Occupation,Income,ReasonForMoving,SSN,Room,Price")] Application application)
		{
			if (ModelState.IsValid)
			{
				_context.Add(application);
				await _context.SaveChangesAsync();
				return RedirectToAction(nameof(Index));
			}
			ViewData["AptUserId"] = new SelectList(_context.AptUsers, "Id", "Id", application.AptUserId);
			return View(application);
		}

		// GET: AppUserAccount/Edit/5
		public async Task<IActionResult> Edit(int? id)
		{
			if (id == null)
			{
				return NotFound();
			}

			var application = await _context.Applications.FindAsync(id);
			if (application == null)
			{
				return NotFound();
			}
			ViewData["AptUserId"] = new SelectList(_context.AptUsers, "Id", "Id", application.AptUserId);
			return View(application);
		}

		// POST: AppUserAccount/Edit/5
		// To protect from overposting attacks, enable the specific properties you want to bind to, for 
		// more details, see http://go.microsoft.com/fwlink/?LinkId=317598.
		[HttpPost]
		[ValidateAntiForgeryToken]
		public async Task<IActionResult> Edit(int id, [Bind("ApplicationId,AptUserId,Occupation,Income,ReasonForMoving,SSN,Room,Price")] Application application)
		{
			if (id != application.ApplicationId)
			{
				return NotFound();
			}

			if (ModelState.IsValid)
			{
				try
				{
					_context.Update(application);
					await _context.SaveChangesAsync();
				}
				catch (DbUpdateConcurrencyException)
				{
					if (!ApplicationExists(application.ApplicationId))
					{
						return NotFound();
					}
					else
					{
						throw;
					}
				}
				return RedirectToAction(nameof(Index));
			}
			ViewData["AptUserId"] = new SelectList(_context.AptUsers, "Id", "Id", application.AptUserId);
			return View(application);
		}

		// GET: AppUserAccount/Delete/5
		public async Task<IActionResult> Delete(int? id)
		{
			if (id == null)
			{
				return NotFound();
			}

			var application = await _context.Applications
				.Include(a => a.AptUser)
				.FirstOrDefaultAsync(m => m.ApplicationId == id);
			if (application == null)
			{
				return NotFound();
			}

			return View(application);
		}

		// POST: AppUserAccount/Delete/5
		[HttpPost, ActionName("Delete")]
		[ValidateAntiForgeryToken]
		public async Task<IActionResult> DeleteConfirmed(int id)
		{
			var application = await _context.Applications.FindAsync(id);
			_context.Applications.Remove(application);
			await _context.SaveChangesAsync();
			return RedirectToAction(nameof(Index));
		}

		private bool ApplicationExists(int id)
		{
			return _context.Applications.Any(e => e.ApplicationId == id);
		}


		//////// Maintenance View ////////////
		
		
		@model Peach_Grove_Apartments_Demo_Project.ViewModels.MaintenanceRequestViewModel
@{
	ViewData["Title"] = "Maintenance";
	Layout = "~/Views/Shared/_AppUserAccountLayout.cshtml";
}

@if (ViewBag.Success != null && ViewBag.Success)
{
	@*<div class="modal fade show" tabindex="" id="success-modal"
			 data-keyboard="false" data-backdrop="static">
			<div class="modal-dialog modal-lg">
				<div class="modal-content">
					<div class="modal-header">

						<h4 class="modal-title" style="background: lightgreen; padding: 30px;">Success!</h4>

						<button type="button" class="close" data-dismiss="modal">
							X
						</button>
					</div>
					<div class="modal-body">
						<p>
							Your maintenance request was submitted successfully.
						</p>
					</div>
				</div>
			</div>
		</div>

		<script>

			$(document).ready(function () {

				$("#success-modal").show;
			}
		</script>*@

	<div style="background: #5ce600; color: white; width: 600px;text-align: center;padding: 40px;">
		<div style="display: inline-block;">
			<b>Your maintenance request was submitted successfully</b>
		</div>
	</div>
	<br />
	<br />

}

<h1>New Maintenance Request</h1>
<br />
<div class="container">
	<ul class="nav nav-tabs mp" role="tablist">
		<li class="nav-item">
			<a class="nav-link active" data-toggle="tab" href="#newreq">

				<div class="wrapper">


					<div class="fp-link-content">
						<span class="fp-group-name"> New Request </span>

					</div>


				</div>
			</a>
		</li>

		<li class="nav-item">
			<a class="nav-link" asp-controller="appuseraccount" asp-action="reqhistory">

				<div class="wrapper">


					<div class="fp-link-content">
						<span class="fp-group-name"> Request History </span>

					</div>


				</div>
			</a>
		</li>

	</ul>


	<div class="tab-content">


		<div id="newreq" class="container tab-pane active">

			<br />
			<form id="newreq" asp-action="maintenance">
				<div asp-validation-summary="ModelOnly" class="text-danger"></div>
				@*<input type="hidden" asp-for="@Model.User" value="@Model.User" />*@

			<div class="form-group">
				<label asp-for="ProblemDescription" class="control-label"></label>
				<textarea asp-for="ProblemDescription" class="form-control" maxlength="10000" required></textarea>
				<span asp-validation-for="ProblemDescription" class="text-danger"></span>
				@*@Html.TextAreaFor(model => model.ProblemDescription, new { required = "required", htmlAttributes = new { @class = "form-control" } })*@



				@*<textarea asp-for="@Model.MaintenanceRequestViewModel.ProblemDescription" class="form-control" style="width: 650px;" maxlength="10000" required></textarea>*@
			</div>
			<div class="form-group">
				<input asp-for="isAllowedToEnter" class="control-label" />
				<label asp-for="isAllowedToEnter" class="control-label"></label>
				<span asp-validation-for="isAllowedToEnter" class="text-danger"></span>
			</div>
				<div class="form-group">
					<input type="submit" value="Submit" class="btn btn-primary" />
				</div>
			</form>


		</div>



	</div>


	@{

		@*@if ((string)TempData["SuccessMessage"] == "success")
			{
				<div class="modal fade in" tabindex="" id="success-modal"
					 data-keyboard="false" data-backdrop="static">
					<div class="modal-dialog modal-lg">
						<div class="modal-content">
							<div class="modal-header">

								<h4 class="modal-title" style="background: lightgreen; padding: 30px;">Success!</h4>

								<button type="button" class="close" data-dismiss="modal">
									X
								</button>
							</div>
							<div class="modal-body">
								<p>
									Your maintenance request was submitted successfully.
								</p>
							</div>
						</div>
					</div>
				</div>



			}
			else
			{
				@TempData["SuccessMessage"].ToString()
			}*@


		<!--if (TempData["SuccessMessage"].ToString() == "success")

		{

			<div class="modal show fade" tabindex="" id="success-modal"
				 data-keyboard="false" data-backdrop="static">
				<div class="modal-dialog modal-lg">
					<div class="modal-content">
						<div class="modal-header">

							<h4 class="modal-title" style="background: lightgreen; padding: 30px;">Success!</h4>

							<button type="button" class="close" data-dismiss="modal">
								X
							</button>
						</div>
						<div class="modal-body">
							<p>
								Your maintenance request was submitted successfully.
							</p>
						</div>
					</div>
				</div>
			</div>-->

		@*<script>
				$(document).ready(function () {
					$('#success-modal').show();
				}
			</script>*@


		<!--}
		else if (TempData["SuccessMessage"].ToString() == "failure")
		{
			<div class="modal fade" tabindex="" id="failure-modal"
				 data-keyboard="false" data-backdrop="static">
				<div class="modal-dialog modal-lg">
					<div class="modal-content">
						<div class="modal-header">

							<h4 class="modal-title" style="background: #ff6666; padding: 30px;">Something Went Wrong!</h4>

							<button type="button" class="close" data-dismiss="modal">
								X
							</button>
						</div>
						<div class="modal-body">
							<p>
								Something went wrong while submitting your request. Our IT engineers have been notified. Thanks!<br />
								Error Message: @TempData["maintReqError"]
							</p>
						</div>
					</div>
				</div>
			</div>
			<script>
				$(document).ready(function () {
					$('#failure-modal').show();
				}

			</script>

		}-->

	}
</div>
@section Scripts 
{
	<partial name="_ValidationScriptsPartial" />

}


	@*if (success == true) {
		//toastr.options = {
		//    "closeButton": true,
		//    "positionClass": "toast-bottom-right"
		//}
		//toastr.success("Success!  You're now registered for Lose A Ton!");

		  $('#success-modal').show();
	}
	else if(@TempData["isSuccess"].ToString() == "failure")
	{
  $('#falure-modal').show();
	}
});*@


	@*if (@TempData["isSuccess"].ToString() == "success")
	{

		}

		$(document).ready(function () {

			var success = @((TempData["SuccessMessage"] != null).ToString().ToLower());

			if (success == true) {
				$('#success-modal').show();
				$('#falure-modal').hide();
			}
			else {
				$('#falure-modal').show();
				$('#success-modal').hide();
			}

		}*@




	@*$(document).ready(function () {


		if (@ViewBag.Success != null && @ViewBag.Success)
		{ toastr.success("Succcess!!"); }

	});
</script>*@

//////////// DBINITIALIZER CLASS ////////////////

   public static void SeedData
  (UserManager<AptUser> userManager,
  RoleManager<IdentityRole> roleManager, ApplicationDbContext dbcontext)
		{
			SeedRoles(roleManager);
			SeedUsers(userManager, dbcontext);
		}

		public static async void SeedUsers
	(UserManager<AptUser> userManager, ApplicationDbContext _context)
		{
			if (userManager.FindByNameAsync
		("john.doe@applicant.com").Result == null)
			{
				var user = new AptUser {

					UserName = "john.doe@applicant.com",
					Email = "john.doe@applicant.com",
					FirstName = "John",
					LastName = "Doe",
					DateOfBirth = DateTime.Parse("08/29/1976"),
					StreetAddress = "1295 Lanny Drive",
					City = "Pittsburgh",
					State = "PA",
					Zipcode = "15213",
					PhoneNumber = "412-555-1212",
					DateRegistered = DateTime.Now
				};

				IdentityResult result = userManager.CreateAsync
				(user, "john4helix").Result;

				if (result.Succeeded)
				{
					userManager.AddToRoleAsync(user,
										"Applicant").GetAwaiter().GetResult();

					var ebill = await _context.ElectricBills.Where(a => a.AptUserId == user.Id).FirstOrDefaultAsync();
					var wbill = await _context.WaterBills.Where(a => a.AptUserId == user.Id).FirstOrDefaultAsync();

					if (ebill == null)
					{
						await _context.ElectricBills.AddAsync(new ElectricBill { AptUser = user, Amount = 98.53M, DateDue = DateTime.Parse("12/25/2020") });
					}

					if (wbill == null)
					{
						await _context.WaterBills.AddAsync(new WaterBill { AptUser = user, Amount = 98.53M, DateDue = DateTime.Parse("12/27/2020") });
					}
				}
			}

			if (userManager.FindByNameAsync
	  ("tom.higgins@resident.com").Result == null)
			{
				var user = new AptUser
				{

					UserName = "tom.higgins@resident.com",
					Email = "tom.higgins@resident.com",
					FirstName = "Tom",
					LastName = "Higgins",
					DateOfBirth = DateTime.Parse("08/29/1966"),
					StreetAddress = "907 Laurel Drive",
					City = "Pittsburgh",
					State = "PA",
					Zipcode = "15213",
					PhoneNumber = "412-555-2222",
					DateRegistered = DateTime.Now
				};

				IdentityResult result = userManager.CreateAsync
				(user, "tom3helix").Result;

				if (result.Succeeded)
				{
					userManager.AddToRoleAsync(user,
										"Resident").GetAwaiter().GetResult();

					var ebill = await _context.ElectricBills.Where(a => a.AptUserId == user.Id).FirstOrDefaultAsync();
					var wbill = await _context.WaterBills.Where(a => a.AptUserId == user.Id).FirstOrDefaultAsync();

					if (ebill == null)
					{
						await _context.ElectricBills.AddAsync(new ElectricBill { AptUser = user, Amount = 98.53M, DateDue = DateTime.Parse("12/25/2020") });
					}

					if (wbill == null)
					{
						await _context.WaterBills.AddAsync(new WaterBill { AptUser = user, Amount = 98.53M, DateDue = DateTime.Parse("12/27/2020") });
					}
				}
			}

			if (userManager.FindByNameAsync
	   ("jamie.jackson@manager.com").Result == null)
			{
				var user = new AptUser
				{

					UserName = "jamie.jackson@manager.com",
					Email = "jamie.jackson@manager.com",
					FirstName = "Jamie",
					LastName = "Jackson",
					DateOfBirth = DateTime.Parse("03/16/1987"),
					StreetAddress = "3496 Larkinson Drive",
					City = "Pittsburgh",
					State = "PA",
					Zipcode = "15222",
					PhoneNumber = "412-555-4444",
					DateRegistered = DateTime.Now
				};

				IdentityResult result = userManager.CreateAsync
				(user, "jamie5helix").Result;

				if (result.Succeeded)
				{
					userManager.AddToRoleAsync(user,
										"Manager").GetAwaiter().GetResult();
				}
			}
		}

		public static void SeedRoles
   (RoleManager<IdentityRole> roleManager)
		{
			if (!roleManager.RoleExistsAsync
		("Applicant").Result)
			{
				IdentityRole role = new IdentityRole();
				role.Name = "Applicant";
				IdentityResult roleResult = roleManager.
				CreateAsync(role).Result;
			}


			if (!roleManager.RoleExistsAsync
		("Resident").Result)
			{
				IdentityRole role = new IdentityRole();
				role.Name = "Resident";
				IdentityResult roleResult = roleManager.
				CreateAsync(role).Result;
			}

			if (!roleManager.RoleExistsAsync
		("Manager").Result)
			{
				IdentityRole role = new IdentityRole();
				role.Name = "Manager";
				IdentityResult roleResult = roleManager.
				CreateAsync(role).Result;
			}
		}

		/////////// DBINIALIZER NEW THAT WORKS!!!! //////////

			private readonly IServiceScopeFactory _scopeFactory;

		public DbInitializer(IServiceScopeFactory scopeFactory)
		{
			this._scopeFactory = scopeFactory;
		}

		public void Initialize()
		{
			using (var serviceScope = _scopeFactory.CreateScope())
			{
				using (var context = serviceScope.ServiceProvider.GetService<ApplicationDbContext>())
				{
					context.Database.Migrate();
				}
			}
		}

		public void SeedData()
		{
			using (var serviceScope = _scopeFactory.CreateScope())
			{
				using (var context = serviceScope.ServiceProvider.GetService<ApplicationDbContext>())
				{

					//add admin user
					if (!context.Users.Any())
					{
						var user1 = new AptUser
						{

							UserName = "john.doe@applicant.com",
							Email = "john.doe@applicant.com",
							FirstName = "John",
							LastName = "Doe",
							DateOfBirth = DateTime.Parse("08/29/1976"),
							StreetAddress = "1295 Lanny Drive",
							City = "Pittsburgh",
							State = "PA",
							Zipcode = "15213",
							PhoneNumber = "412-555-1212",
							DateRegistered = DateTime.Now
						};

						context.Users.Add(user1);
					}

					context.SaveChanges();
				}
			}
		}

	 ---------------------------------------------
		
							var ebill = await context.ElectricBills.Where(a => a.AptUserId == user.Id).FirstOrDefaultAsync();
							var wbill = await context.WaterBills.Where(a => a.AptUserId == user.Id).FirstOrDefaultAsync();

							if (ebill == null)
							{
								await context.ElectricBills.AddAsync(new ElectricBill { AptUser = user, Amount = 98.53M, DateDue = DateTime.Parse("12/25/2020") });
							}

							if (wbill == null)
							{
								await context.WaterBills.AddAsync(new WaterBill { AptUser = user, Amount = 57.23M, DateDue = DateTime.Parse("12/27/2020") });
							}
	 
	 
	 ///////////// Manager Controller ////////////////

				 //    if (id == null)
			//    {
			//        return NotFound();
			//    }

			//    var application = await _context.Applications
			//        .Include(a => a.AptUser)
			//        .FirstOrDefaultAsync(m => m.ApplicationId == id);

			//    if (application == null)
			//    {
			//        return NotFound();
			//    }

			//    var applicationUser = from userRecord in _context.Users
			//                           join applicationRecord in _context.Applications on userRecord.Id equals applicationRecord.AptUserId
			//                           select userRecord;


			//    applicationUser.FirstOrDefaultAsync(m => m.);


	///////////// AJAX JSON EXAMPLE ////////////////////////////////

	Live Demo
<html>
   <head>
	  <meta content = "text/html; charset = ISO-8859-1" http-equiv = "content-type">
		
	  <script type = "application/javascript">
		 function loadJSON() {
			var data_file = "http://www.tutorialspoint.com/json/data.json";
			var http_request = new XMLHttpRequest();
			try{
			   // Opera 8.0+, Firefox, Chrome, Safari
			   http_request = new XMLHttpRequest();
			}catch (e) {
			   // Internet Explorer Browsers
			   try{
				  http_request = new ActiveXObject("Msxml2.XMLHTTP");
					
			   }catch (e) {
				
				  try{
					 http_request = new ActiveXObject("Microsoft.XMLHTTP");
				  }catch (e) {
					 // Something went wrong
					 alert("Your browser broke!");
					 return false;
				  }
					
			   }
			}
			
			http_request.onreadystatechange = function() {
			
			   if (http_request.readyState == 4  ) {
				  // Javascript function JSON.parse to parse JSON data
				  var jsonObj = JSON.parse(http_request.responseText);

				  // jsonObj variable now contains the data structure and can
				  // be accessed as jsonObj.name and jsonObj.country.
				  document.getElementById("Name").innerHTML = jsonObj.name;
				  document.getElementById("Country").innerHTML = jsonObj.country;
			   }
			}
			
			http_request.open("GET", data_file, true);
			http_request.send();
		 }
		
	  </script>
	
	  <title>tutorialspoint.com JSON</title>
   </head>
	
   <body>
	  <h1>Cricketer Details</h1>
		
	  <table class = "src">
		 <tr><th>Name</th><th>Country</th></tr>
		 <tr><td><div id = "Name">Sachin</div></td>
		 <td><div id = "Country">India</div></td></tr>
	  </table>

	  <div class = "central">
		 <button type = "button" onclick = "loadJSON()">Update Details </button>
	  </div>
		
   </body>
		
</html>

////////////////////////// LAYOUT HEAD //////////////////////////////



	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

	@*<link rel="stylesheet" href="~/lib/bootstrap-4.5.3/css/bootstrap.css" />*@
	<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
	<link rel="stylesheet" href="~/css/site.css" />
	<link rel="stylesheet" href="~/css/useraccount.css" />






	@*<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.3/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

		<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">

		<link rel="stylesheet" href="~/css/site.css" />
		<link rel="stylesheet" href="~/css/useraccount.css" />

		<script src="https://code.jquery.com/jquery-3.5.1.min.js"
				integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
				crossorigin="anonymous"></script>

		<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.0.0/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>*@

		
	<script src="https://code.jquery.com/jquery-3.5.1.js"
			integrity="sha256-QWo7LDvxbWT2tbbQ97B53yJnYU3WhH/C8ycbRAkjPDc="
			crossorigin="anonymous"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.5.3/umd/popper.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous"></script>




	@*<script src="~/lib/jquery/dist/jquery-3.5.1.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.5.3/umd/popper.min.js"></script>
	<script src="~/lib/bootstrap-4.5.3/js/bootstrap.js"></script>*@

/////////////////////// MANAGER ACCOUNT APPLICATIONUSER.CSHTML ///////////////////////////

@using Microsoft.AspNetCore.Identity
@inject SignInManager<AptUser> SignInManager
@inject UserManager<AptUser> UserManager
@model Peach_Grove_Apartments_Demo_Project.ViewModels.ApplicationViewModel
@{
	ViewData["Title"] = "Application User";
	var params = new Dictionary<string, string>
			{
				{ "id", @Model.Id },
				{ "aptnumber", @Model.AptNumber },
				{ "aptprice", @Model.Price },
				{ "ssn", @Model.SSN },
				{ "appid", @Model.ApplicationId }
			};

}

<partial name="_LoggedInAsPartial" />
<br />
<h1>Applications for @Model.FirstName @Model.LastName</h1>

<hr />
<div class="container">
	@{
		if (@Model.Apps.Count != 0)
		{ <table class="table fp-table">

			<thead class="thead-light">
				<tr>
					<th scope="col">Application Id</th>
					<th scope="col"></th>
					<th scope="col"></th>
					<th scope="col"></th>
					<th scope="col"></th>
					<th scope="col"></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var application in Model.Apps)

					{
				<tr>
					<td>@application.ApplicationId</td>

					<td>

						<a asp-controller="manageraccount" asp-action="viewapplication" asp-route-id="@application.ApplicationId">View</a>
					</td>

					<td>

						<a asp-controller="manageraccount" asp-action="applicationedit" asp-route-id="@application.ApplicationId">Edit</a>
					</td>

					<td>

						<a asp-controller="manageraccount" asp-action="applicationdelete" asp-route-id="@application.ApplicationId">Delete</a>
					</td>



				  

							@if (@application.isApproved)
							{

						<td>
							<span style="color: darkgreen">Approved</span>
						</td>

						<td><a asp-controller="manageraccount" asp-action="unapproveapplication" asp-all-route-data="@params">Unapprove</a></td>

							}
							else if(@application.isUnApproved)
							{
						<td>

							<div><span style="color: darkred">Unapproved</span></div>


						</td>
						<td>

							@*<a asp-controller="manageraccount" asp-action="approveapplication" asp-route-id="@application.AptUserId" asp-route-ssn="@application.SSN" asp-route-aptnumber="@application.AptNumber" asp-route-aptprice="@application.Price" asp-route-appid="@application.ApplicationId" class="fp-applylink">Reapprove</a>*@

							<a asp-controller="manageraccount" asp-action="approveapplication" asp-all-route-data="@parms">Reapprove</a>
						</td>

							}
					else
					{
						<td>

							<a asp-controller="manageraccount" asp-action="approveapplication" asp-all-route-data="@params">Approve</a>

						</td>

					}
					
				</tr>
					}
				
				</tbody>
				</table>
		}
		else
		{
				<h4>This applicant does not have any applications on file.</h4>
		}
	}
	</div>